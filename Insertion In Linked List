//We can insert elements in L#include<iostream>
using namespace std;

struct Node {
	int data;
	struct Node* next; 
};
void traversal(struct Node* ptr) {
	while (ptr != NULL)
	{
		cout << ptr->data<<" ";
		ptr = ptr->next;
	}
	cout << endl;
}

struct Node * insertAtFirst(struct Node *head, int data)
{
	struct Node* ptr = (struct Node*)malloc(sizeof(struct Node));
	ptr->next = head;
	ptr->data = data;
	return ptr;
}
struct Node* inseratIndex(struct Node* head, int data, int index) {
	struct Node* ptr = (struct Node*)malloc(sizeof(struct Node));
	struct Node* p = head;
	int i = 0;
	while (i != index - 1) {
		p = p->next;
		i++; 
	}
	ptr->data = data;
	ptr->next=p->next;
	p->next = ptr;
	return head;
}
struct Node* insertatEnd(struct Node* head, int data)
{
	struct Node *ptr = (struct Node*)malloc(sizeof(struct Node));
	ptr->data = data;
	struct Node* p = head;
	while (p->next != NULL)
	{
		p = p->next;
	}
	p->next = ptr;
	ptr->next = NULL;
	return head;
}
struct Node* insertafterNode(struct Node* head,struct Node* prevNode, int data)
{
	struct Node* ptr = (struct Node*)malloc(sizeof(struct Node));
	ptr->data = data;
	ptr->next = prevNode->next;
	prevNode->next = ptr;
	return head;
}
int main()
{
	struct Node *head;
	struct Node *second;
	struct Node *third;
	struct Node *fourth;
	head = (struct Node *)malloc(sizeof(struct Node));
	second = (struct Node *)malloc(sizeof(struct Node));
	third = (struct Node *)malloc(sizeof(struct Node));
	fourth= (struct Node *)malloc(sizeof(struct Node));
	head->data = 7;
	head->next = second;
	second->data = 11;
	second->next = third;
	third->data = 5;
	third->next = fourth;
	fourth->data = 3;
	fourth->next = NULL;
	cout << "Original List " << endl;
	traversal(head);
	head = insertAtFirst(head, 65);
	cout << "inserted at first position "<<endl;
	traversal(head);
	cout << "inserted at index " << endl;
	head = inseratIndex(head, 43, 3);
	traversal(head);
	cout << "Inser at end " << endl;
	head = insertatEnd(head, 78);
	traversal(head);
	cout << "Inser after node " << endl;
	head = insertafterNode(head, second,23);
	traversal(head);
	return 0;
}inked List in 4 ways(start,end,given index,after the node)
